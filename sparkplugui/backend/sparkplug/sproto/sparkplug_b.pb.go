// * Copyright (c) 2015, 2018 Cirrus Link Solutions and others
// *
// * This program and the accompanying materials are made available under the
// * terms of the Eclipse Public License 2.0 which is available at
// * http://www.eclipse.org/legal/epl-2.0.
// *
// * SPDX-License-Identifier: EPL-2.0
// *
// * Contributors:
// *   Cirrus Link Solutions - initial implementation

//
// To compile:
// cd client_libraries/java
// protoc --proto_path=../../ --java_out=src/main/java ../../sparkplug_b.proto
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.11
// source: sproto/sparkplug_b.proto

package sproto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DataType int32

const (
	// Unknown placeholder for future expansion.
	DataType_Unknown DataType = 0
	// Basic Types
	DataType_Int8     DataType = 1
	DataType_Int16    DataType = 2
	DataType_Int32    DataType = 3
	DataType_Int64    DataType = 4
	DataType_UInt8    DataType = 5
	DataType_UInt16   DataType = 6
	DataType_UInt32   DataType = 7
	DataType_UInt64   DataType = 8
	DataType_Float    DataType = 9
	DataType_Double   DataType = 10
	DataType_Boolean  DataType = 11
	DataType_String   DataType = 12
	DataType_DateTime DataType = 13
	DataType_Text     DataType = 14
	// Additional Metric Types
	DataType_UUID     DataType = 15
	DataType_DataSet  DataType = 16
	DataType_Bytes    DataType = 17
	DataType_File     DataType = 18
	DataType_Template DataType = 19
	// Additional PropertyValue Types
	DataType_PropertySet     DataType = 20
	DataType_PropertySetList DataType = 21
	// Array Types
	DataType_Int8Array     DataType = 22
	DataType_Int16Array    DataType = 23
	DataType_Int32Array    DataType = 24
	DataType_Int64Array    DataType = 25
	DataType_UInt8Array    DataType = 26
	DataType_UInt16Array   DataType = 27
	DataType_UInt32Array   DataType = 28
	DataType_UInt64Array   DataType = 29
	DataType_FloatArray    DataType = 30
	DataType_DoubleArray   DataType = 31
	DataType_BooleanArray  DataType = 32
	DataType_StringArray   DataType = 33
	DataType_DateTimeArray DataType = 34
)

// Enum value maps for DataType.
var (
	DataType_name = map[int32]string{
		0:  "Unknown",
		1:  "Int8",
		2:  "Int16",
		3:  "Int32",
		4:  "Int64",
		5:  "UInt8",
		6:  "UInt16",
		7:  "UInt32",
		8:  "UInt64",
		9:  "Float",
		10: "Double",
		11: "Boolean",
		12: "String",
		13: "DateTime",
		14: "Text",
		15: "UUID",
		16: "DataSet",
		17: "Bytes",
		18: "File",
		19: "Template",
		20: "PropertySet",
		21: "PropertySetList",
		22: "Int8Array",
		23: "Int16Array",
		24: "Int32Array",
		25: "Int64Array",
		26: "UInt8Array",
		27: "UInt16Array",
		28: "UInt32Array",
		29: "UInt64Array",
		30: "FloatArray",
		31: "DoubleArray",
		32: "BooleanArray",
		33: "StringArray",
		34: "DateTimeArray",
	}
	DataType_value = map[string]int32{
		"Unknown":         0,
		"Int8":            1,
		"Int16":           2,
		"Int32":           3,
		"Int64":           4,
		"UInt8":           5,
		"UInt16":          6,
		"UInt32":          7,
		"UInt64":          8,
		"Float":           9,
		"Double":          10,
		"Boolean":         11,
		"String":          12,
		"DateTime":        13,
		"Text":            14,
		"UUID":            15,
		"DataSet":         16,
		"Bytes":           17,
		"File":            18,
		"Template":        19,
		"PropertySet":     20,
		"PropertySetList": 21,
		"Int8Array":       22,
		"Int16Array":      23,
		"Int32Array":      24,
		"Int64Array":      25,
		"UInt8Array":      26,
		"UInt16Array":     27,
		"UInt32Array":     28,
		"UInt64Array":     29,
		"FloatArray":      30,
		"DoubleArray":     31,
		"BooleanArray":    32,
		"StringArray":     33,
		"DateTimeArray":   34,
	}
)

func (x DataType) Enum() *DataType {
	p := new(DataType)
	*p = x
	return p
}

func (x DataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataType) Descriptor() protoreflect.EnumDescriptor {
	return file_sproto_sparkplug_b_proto_enumTypes[0].Descriptor()
}

func (DataType) Type() protoreflect.EnumType {
	return &file_sproto_sparkplug_b_proto_enumTypes[0]
}

func (x DataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataType.Descriptor instead.
func (DataType) EnumDescriptor() ([]byte, []int) {
	return file_sproto_sparkplug_b_proto_rawDescGZIP(), []int{0}
}

type Payload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp *uint64           `protobuf:"varint,1,opt,name=timestamp,proto3,oneof" json:"timestamp,omitempty"` // Timestamp at message sending time
	Metrics   []*Payload_Metric `protobuf:"bytes,2,rep,name=metrics,proto3" json:"metrics,omitempty"`            // Repeated forever - no limit in Google Protobufs
	Seq       *uint64           `protobuf:"varint,3,opt,name=seq,proto3,oneof" json:"seq,omitempty"`             // Sequence number
}

func (x *Payload) Reset() {
	*x = Payload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sproto_sparkplug_b_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Payload) ProtoMessage() {}

func (x *Payload) ProtoReflect() protoreflect.Message {
	mi := &file_sproto_sparkplug_b_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Payload.ProtoReflect.Descriptor instead.
func (*Payload) Descriptor() ([]byte, []int) {
	return file_sproto_sparkplug_b_proto_rawDescGZIP(), []int{0}
}

func (x *Payload) GetTimestamp() uint64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *Payload) GetMetrics() []*Payload_Metric {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *Payload) GetSeq() uint64 {
	if x != nil && x.Seq != nil {
		return *x.Seq
	}
	return 0
}

type Payload_Metric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         *string `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`                                      // Metric name - should only be included on birth
	Alias        *uint64 `protobuf:"varint,2,opt,name=alias,proto3,oneof" json:"alias,omitempty"`                                   // Metric alias - tied to name on birth and included in all later DATA messages
	Datatype     *uint32 `protobuf:"varint,4,opt,name=datatype,proto3,oneof" json:"datatype,omitempty"`                             // DataType of the metric/tag value
	IsHistorical *bool   `protobuf:"varint,5,opt,name=is_historical,json=isHistorical,proto3,oneof" json:"is_historical,omitempty"` // If this is historical data and should not update real time tag
	IsTransient  *bool   `protobuf:"varint,6,opt,name=is_transient,json=isTransient,proto3,oneof" json:"is_transient,omitempty"`    // Tells consuming clients such as MQTT Engine to not store this as a tag
	IsNull       *bool   `protobuf:"varint,7,opt,name=is_null,json=isNull,proto3,oneof" json:"is_null,omitempty"`                   // If this is null - explicitly say so rather than using -1, false, etc for some datatypes.
	// Types that are assignable to Value:
	//	*Payload_Metric_IntValue
	//	*Payload_Metric_LongValue
	//	*Payload_Metric_FloatValue
	//	*Payload_Metric_DoubleValue
	//	*Payload_Metric_BooleanValue
	//	*Payload_Metric_StringValue
	//	*Payload_Metric_BytesValue
	Value isPayload_Metric_Value `protobuf_oneof:"value"`
}

func (x *Payload_Metric) Reset() {
	*x = Payload_Metric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sproto_sparkplug_b_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Payload_Metric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Payload_Metric) ProtoMessage() {}

func (x *Payload_Metric) ProtoReflect() protoreflect.Message {
	mi := &file_sproto_sparkplug_b_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Payload_Metric.ProtoReflect.Descriptor instead.
func (*Payload_Metric) Descriptor() ([]byte, []int) {
	return file_sproto_sparkplug_b_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Payload_Metric) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Payload_Metric) GetAlias() uint64 {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return 0
}

func (x *Payload_Metric) GetDatatype() uint32 {
	if x != nil && x.Datatype != nil {
		return *x.Datatype
	}
	return 0
}

func (x *Payload_Metric) GetIsHistorical() bool {
	if x != nil && x.IsHistorical != nil {
		return *x.IsHistorical
	}
	return false
}

func (x *Payload_Metric) GetIsTransient() bool {
	if x != nil && x.IsTransient != nil {
		return *x.IsTransient
	}
	return false
}

func (x *Payload_Metric) GetIsNull() bool {
	if x != nil && x.IsNull != nil {
		return *x.IsNull
	}
	return false
}

func (m *Payload_Metric) GetValue() isPayload_Metric_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Payload_Metric) GetIntValue() uint32 {
	if x, ok := x.GetValue().(*Payload_Metric_IntValue); ok {
		return x.IntValue
	}
	return 0
}

func (x *Payload_Metric) GetLongValue() uint64 {
	if x, ok := x.GetValue().(*Payload_Metric_LongValue); ok {
		return x.LongValue
	}
	return 0
}

func (x *Payload_Metric) GetFloatValue() float32 {
	if x, ok := x.GetValue().(*Payload_Metric_FloatValue); ok {
		return x.FloatValue
	}
	return 0
}

func (x *Payload_Metric) GetDoubleValue() float64 {
	if x, ok := x.GetValue().(*Payload_Metric_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (x *Payload_Metric) GetBooleanValue() bool {
	if x, ok := x.GetValue().(*Payload_Metric_BooleanValue); ok {
		return x.BooleanValue
	}
	return false
}

func (x *Payload_Metric) GetStringValue() string {
	if x, ok := x.GetValue().(*Payload_Metric_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *Payload_Metric) GetBytesValue() []byte {
	if x, ok := x.GetValue().(*Payload_Metric_BytesValue); ok {
		return x.BytesValue
	}
	return nil
}

type isPayload_Metric_Value interface {
	isPayload_Metric_Value()
}

type Payload_Metric_IntValue struct {
	IntValue uint32 `protobuf:"varint,10,opt,name=int_value,json=intValue,proto3,oneof"`
}

type Payload_Metric_LongValue struct {
	LongValue uint64 `protobuf:"varint,11,opt,name=long_value,json=longValue,proto3,oneof"`
}

type Payload_Metric_FloatValue struct {
	FloatValue float32 `protobuf:"fixed32,12,opt,name=float_value,json=floatValue,proto3,oneof"`
}

type Payload_Metric_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,13,opt,name=double_value,json=doubleValue,proto3,oneof"`
}

type Payload_Metric_BooleanValue struct {
	BooleanValue bool `protobuf:"varint,14,opt,name=boolean_value,json=booleanValue,proto3,oneof"`
}

type Payload_Metric_StringValue struct {
	StringValue string `protobuf:"bytes,15,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type Payload_Metric_BytesValue struct {
	BytesValue []byte `protobuf:"bytes,16,opt,name=bytes_value,json=bytesValue,proto3,oneof"` // Bytes, File
}

func (*Payload_Metric_IntValue) isPayload_Metric_Value() {}

func (*Payload_Metric_LongValue) isPayload_Metric_Value() {}

func (*Payload_Metric_FloatValue) isPayload_Metric_Value() {}

func (*Payload_Metric_DoubleValue) isPayload_Metric_Value() {}

func (*Payload_Metric_BooleanValue) isPayload_Metric_Value() {}

func (*Payload_Metric_StringValue) isPayload_Metric_Value() {}

func (*Payload_Metric_BytesValue) isPayload_Metric_Value() {}

var File_sproto_sparkplug_b_proto protoreflect.FileDescriptor

var file_sproto_sparkplug_b_proto_rawDesc = []byte{
	0x0a, 0x18, 0x73, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x70, 0x6c,
	0x75, 0x67, 0x5f, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xa9, 0x05, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x21, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x48, 0x00, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x88, 0x01, 0x01,
	0x12, 0x2f, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x12, 0x15, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01,
	0x52, 0x03, 0x73, 0x65, 0x71, 0x88, 0x01, 0x01, 0x1a, 0x9c, 0x04, 0x0a, 0x06, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x02, 0x52, 0x05, 0x61,
	0x6c, 0x69, 0x61, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x08, 0x64, 0x61, 0x74,
	0x61, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x04, 0x52, 0x0c, 0x69, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x65,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x0b, 0x69, 0x73, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x69, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x69, 0x73,
	0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x06, 0x52, 0x06, 0x69,
	0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x08, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x6c, 0x6f, 0x6e, 0x67, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x09, 0x6c,
	0x6f, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61,
	0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52,
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x25, 0x0a, 0x0d, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x6f, 0x6f, 0x6c, 0x65,
	0x61, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0b,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0c, 0x48, 0x00, 0x52, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x69, 0x73, 0x5f,
	0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69,
	0x73, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x69, 0x73, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x73, 0x65, 0x71, 0x2a, 0xf2, 0x03,
	0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x6e, 0x74, 0x38, 0x10,
	0x01, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x6e, 0x74, 0x31, 0x36, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x49, 0x6e, 0x74, 0x38, 0x10, 0x05, 0x12, 0x0a, 0x0a,
	0x06, 0x55, 0x49, 0x6e, 0x74, 0x31, 0x36, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x10,
	0x08, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x10, 0x09, 0x12, 0x0a, 0x0a, 0x06,
	0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x10, 0x0a, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x10, 0x0b, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x10,
	0x0c, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x10, 0x0d, 0x12,
	0x08, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x10, 0x0e, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x55, 0x49,
	0x44, 0x10, 0x0f, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x74, 0x10, 0x10,
	0x12, 0x09, 0x0a, 0x05, 0x42, 0x79, 0x74, 0x65, 0x73, 0x10, 0x11, 0x12, 0x08, 0x0a, 0x04, 0x46,
	0x69, 0x6c, 0x65, 0x10, 0x12, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x10, 0x13, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x53,
	0x65, 0x74, 0x10, 0x14, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x53, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x10, 0x15, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x6e, 0x74,
	0x38, 0x41, 0x72, 0x72, 0x61, 0x79, 0x10, 0x16, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x6e, 0x74, 0x31,
	0x36, 0x41, 0x72, 0x72, 0x61, 0x79, 0x10, 0x17, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x41, 0x72, 0x72, 0x61, 0x79, 0x10, 0x18, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x41, 0x72, 0x72, 0x61, 0x79, 0x10, 0x19, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x49, 0x6e, 0x74,
	0x38, 0x41, 0x72, 0x72, 0x61, 0x79, 0x10, 0x1a, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x49, 0x6e, 0x74,
	0x31, 0x36, 0x41, 0x72, 0x72, 0x61, 0x79, 0x10, 0x1b, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x41, 0x72, 0x72, 0x61, 0x79, 0x10, 0x1c, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x41, 0x72, 0x72, 0x61, 0x79, 0x10, 0x1d, 0x12, 0x0e, 0x0a, 0x0a, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x10, 0x1e, 0x12, 0x0f, 0x0a, 0x0b, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x10, 0x1f, 0x12, 0x10, 0x0a, 0x0c,
	0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x41, 0x72, 0x72, 0x61, 0x79, 0x10, 0x20, 0x12, 0x0f,
	0x0a, 0x0b, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x72, 0x61, 0x79, 0x10, 0x21, 0x12,
	0x11, 0x0a, 0x0d, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x10, 0x22, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x2f, 0x73, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sproto_sparkplug_b_proto_rawDescOnce sync.Once
	file_sproto_sparkplug_b_proto_rawDescData = file_sproto_sparkplug_b_proto_rawDesc
)

func file_sproto_sparkplug_b_proto_rawDescGZIP() []byte {
	file_sproto_sparkplug_b_proto_rawDescOnce.Do(func() {
		file_sproto_sparkplug_b_proto_rawDescData = protoimpl.X.CompressGZIP(file_sproto_sparkplug_b_proto_rawDescData)
	})
	return file_sproto_sparkplug_b_proto_rawDescData
}

var file_sproto_sparkplug_b_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_sproto_sparkplug_b_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_sproto_sparkplug_b_proto_goTypes = []interface{}{
	(DataType)(0),          // 0: proto.DataType
	(*Payload)(nil),        // 1: proto.Payload
	(*Payload_Metric)(nil), // 2: proto.Payload.Metric
}
var file_sproto_sparkplug_b_proto_depIdxs = []int32{
	2, // 0: proto.Payload.metrics:type_name -> proto.Payload.Metric
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_sproto_sparkplug_b_proto_init() }
func file_sproto_sparkplug_b_proto_init() {
	if File_sproto_sparkplug_b_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sproto_sparkplug_b_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Payload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sproto_sparkplug_b_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Payload_Metric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_sproto_sparkplug_b_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_sproto_sparkplug_b_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Payload_Metric_IntValue)(nil),
		(*Payload_Metric_LongValue)(nil),
		(*Payload_Metric_FloatValue)(nil),
		(*Payload_Metric_DoubleValue)(nil),
		(*Payload_Metric_BooleanValue)(nil),
		(*Payload_Metric_StringValue)(nil),
		(*Payload_Metric_BytesValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sproto_sparkplug_b_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sproto_sparkplug_b_proto_goTypes,
		DependencyIndexes: file_sproto_sparkplug_b_proto_depIdxs,
		EnumInfos:         file_sproto_sparkplug_b_proto_enumTypes,
		MessageInfos:      file_sproto_sparkplug_b_proto_msgTypes,
	}.Build()
	File_sproto_sparkplug_b_proto = out.File
	file_sproto_sparkplug_b_proto_rawDesc = nil
	file_sproto_sparkplug_b_proto_goTypes = nil
	file_sproto_sparkplug_b_proto_depIdxs = nil
}
